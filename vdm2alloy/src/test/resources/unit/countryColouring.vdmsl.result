"module countryColouring.vdmsl\n\n\nopen util/relation\nopen util/boolean\nopen vdmutil\n\n/************************   Country   ************************/\nsig char{}\nsig Country{\n\u0009x: seq char\n}\nfact CountrySet{\nall c1,c2 : Country | c1.x = c2.x implies c1=c2\n}\n\n/************************   Relation   ************************/\nsig CountryCountryProduct{\n\u0009fst: one Country, \n\u0009snd: one Country\n}\nfact CountryCountryProductF{\nall x1,x2 : CountryCountryProduct | (x1.fst = x2.fst and x1.snd = x2.snd) implies x1=x2\n}\n\nsig setOfCountryCountry{\n\u0009contentsCountryCountry: set CountryCountryProduct\n}\nfact CountryCountrySet{\nall c1,c2 : setOfCountryCountry | c1.contentsCountryCountry = c2.contentsCountryCountry implies c1 = c2\n}\n\nsig Relation in univ{}\nfact RelationInv{\nRelation = { x : setOfCountryCountry | let r = x.contentsCountryCountry | isRelation[r]  }\n}\n\n/************************   Colour   ************************/\nsig setOfCountry{\n\u0009contentsCountry: set Country\n}\nfact CountrySet{\nall c1,c2 : setOfCountry | c1.contentsCountry = c2.contentsCountry implies c1 = c2\n}\n\nsig Colour in univ{}\nfact ColourInv{\nColour = { x : setOfCountry }\n}\n\n/************************   Colouring   ************************/\nsig setOfColour{\n\u0009contentsColour: set Colour\n}\nfact ColourSet{\nall c1,c2 : setOfColour | c1.contentsColour = c2.contentsColour implies c1 = c2\n}\n\nsig Colouring in univ{}\nfact ColouringInv{\nColouring = { x : setOfColour }\n}\n\npred isRelation(r: Relation)\n{\u0009let r = r.contentsCountryCountry | /* Body */\u0009\n\u0009( all c1 : Country, c2 : Country | \n\u0009\u0009(c1 in r.fst and c2 in r.snd implies \n\u0009\u0009\u0009(c1 != c2)\n\u0009\u0009)\n\u0009)\n\n}\n\nrun isRelation\npred areNb(cn1: Country, cn2: Country, r: Relation)\n{\u0009let r = r.contentsCountryCountry | /* Body */\u0009\n\u0009(\n\u0009\u0009(cn1 in r.fst and cn2 in r.snd)\n\u0009 or \n\u0009\u0009(cn2 in r.fst and cn1 in r.snd)\n\u0009)\n\n}\n\nrun areNb\nfun CountriesRel[r: Relation]: set Country\n{\u0009let r = r.contentsCountryCountry | /* Body */\u0009toSet[ {c1 : Country, c2 : Country | c1 in r.fst and c2 in r.snd}]\n}\n\nrun CountriesRel\npred sameColour(cn1: Country, cn2: Country, cols: Colouring)\n{\u0009let cols = cols.contentsColour | /* Body */\u0009some col : cols | \n\u0009(\n\u0009\u0009(cn1 in col.contentsCountry)\n\u0009 and \n\u0009\u0009(cn2 in col.contentsCountry)\n\u0009)\n\n}\n\nrun sameColour\nfun CountriesCol[cols: Colouring]: set Country\n{\u0009let cols = cols.contentsColour | /* Body */\u0009\n\u0009(cols.contentsCountry)\n\n}\n\nrun CountriesCol\npred isColouring(cols: Colouring)\n{\u0009let cols = cols.contentsColour | /* Body */\u0009\n\u0009( all col1, col2 : cols | \n\u0009\u0009(\n\u0009\u0009\u0009(col1 != col2)\n\u0009\u0009 implies no \n\u0009\u0009\u0009(col1 & col2)\n\u0009\u0009)\n\u0009)\n\n}\n\nrun isColouring\npred isColouringOf(cols: Colouring, cns: set Country)\n{\u0009\n\u0009(CountriesCol[cols]  = cns)\n\n}\n\nrun isColouringOf\npred nbDistinctColours(cols: Colouring, r: Relation)\n{\u0009let cols = cols.contentsColour | let r = r.contentsCountryCountry | /* Body */\u0009\n\u0009( all cn1, cn2 : CountriesRel[r]  | \n\u0009\u0009(areNb[cn1, cn2, r]  implies not sameColour[cn1, cn2, cols] )\n\u0009)\n\n}\n\nrun nbDistinctColours\npred colMap(r: Relation, cols : Colouring)\n{\u0009 /* Pre conditions */\u0009isRelation[r] \u0009 /* Post conditions */\u0009\n\u0009(isColouring[cols]  and \n\u0009\u0009(isColouringOf[cols, CountriesRel[r] ]  and nbDistinctColours[cols, r] )\n\u0009)\n\n}\n\nrun colMap"